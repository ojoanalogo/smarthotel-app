"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Observable_1 = require("rxjs/Observable");
var place_model_1 = require("../models/place.model");
var backend_service_1 = require("../services/backend.service");
var location_service_1 = require("../services/location.service");
var nativescript_secure_storage_1 = require("nativescript-secure-storage");
var connectivity = require("tns-core-modules/connectivity");
require("rxjs/add/operator/map");
require("rxjs/add/operator/do");
var PlacesService = (function () {
    function PlacesService(http, locationService) {
        this.http = http;
        this.locationService = locationService;
        this.secureStorage = new nativescript_secure_storage_1.SecureStorage();
    }
    PlacesService.prototype.getPlaces = function (location) {
        var _this = this;
        if (connectivity.getConnectionType() == connectivity.connectionType.none) {
            return Observable_1.Observable.throw("");
        }
        var places = [];
        var apiKEY = "AIzaSyC3t37wmitrNWtfbKcIyfjRbKN8yp7duLk";
        var url = backend_service_1.BackendService.placesGoogleURL + "key=" + apiKEY + "&location="
            + location.latitude.toString() + "," + location.longitude.toString() + "&radius=10000&language=es&types=";
        var parks = this.http.get(url + place_model_1.PlaceType.PARK).map(function (res) { return res.json(); });
        var restaurants = this.http.get(url + place_model_1.PlaceType.RESTAURANT).map(function (res) { return res.json(); });
        var museums = this.http.get(url + place_model_1.PlaceType.MUSEUM).map(function (res) { return res.json(); });
        var art_galleries = this.http.get(url + place_model_1.PlaceType.ART_GALLERY).map(function (res) { return res.json(); });
        var cafes = this.http.get(url + place_model_1.PlaceType.CAFE).map(function (res) { return res.json(); });
        var casinos = this.http.get(url + place_model_1.PlaceType.CASINO).map(function (res) { return res.json(); });
        var zoo = this.http.get(url + place_model_1.PlaceType.ZOO).map(function (res) { return res.json(); });
        var shopping = this.http.get(url + place_model_1.PlaceType.SHOPPING_MALL).map(function (res) { return res.json(); });
        var bars = this.http.get(url + place_model_1.PlaceType.BAR).map(function (res) { return res.json(); });
        var night_clubs = this.http.get(url + place_model_1.PlaceType.NIGHT_CLUB).map(function (res) { return res.json(); });
        return Observable_1.Observable.forkJoin([parks, restaurants, museums, art_galleries, cafes,
            casinos, zoo, shopping, bars, night_clubs]).map(function (data) {
            var placeType;
            var i = 0;
            data.forEach(function (dataTypes) {
                dataTypes["results"].forEach(function (place) {
                    var ref;
                    if ('photos' in place) {
                        ref = place.photos[0].photo_reference;
                    }
                    else {
                        ref = "null";
                    }
                    places.push(new place_model_1.Place(place.place_id, place.name, place.geometry.location, _this.getPlaceType(i), ref));
                });
                i++;
            });
            return places;
        });
    };
    PlacesService.prototype.placesExist = function () {
        return this.secureStorage.get({ key: "placesData" });
        // let val = this.secureStorage.getSync({key: "placesData"});
        // return (val==null) ? false : true;
    };
    PlacesService.prototype.getDistancePlace = function (placeLocation) {
        var distance = this.locationService.getDistance(this.locationService.getLocation(), placeLocation);
        if (distance >= 1) {
            return (distance).toFixed(1) + " kilometros";
        }
        return (distance * 1000).toFixed(0) + " metros";
    };
    PlacesService.prototype.getPlaceType = function (i) {
        var place;
        switch (i) {
            case 0: return place_model_1.PlaceType.PARK;
            case 1: return place_model_1.PlaceType.RESTAURANT;
            case 2: return place_model_1.PlaceType.MUSEUM;
            case 3: return place_model_1.PlaceType.ART_GALLERY;
            case 4: return place_model_1.PlaceType.CAFE;
            case 5: return place_model_1.PlaceType.CASINO;
            case 6: return place_model_1.PlaceType.ZOO;
            case 7: return place_model_1.PlaceType.SHOPPING_MALL;
            case 8: return place_model_1.PlaceType.BAR;
            case 9: return place_model_1.PlaceType.NIGHT_CLUB;
        }
    };
    PlacesService.prototype.storePlaces = function (places) {
        return this.secureStorage.set({ key: "placesData", value: JSON.stringify(places) });
    };
    PlacesService.prototype.getSavedPlaces = function () {
        return this.secureStorage.get({ key: "placesData" });
    };
    PlacesService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.Http, location_service_1.LocationService])
    ], PlacesService);
    return PlacesService;
}());
exports.PlacesService = PlacesService;
//# sourceMappingURL=data:application/json;base64,